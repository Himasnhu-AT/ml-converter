# -*- coding: utf-8 -*-
"""Untitled13.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aHOS_rEHOsLjB_wXkEX0z2t3-EFhF4se
"""

# !pip install scikit-learn==1.2.2

# Import necessary libraries
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn import metrics
import pandas as pd
import joblib
  # Load the dataset
dataset = pd.read_csv("/content/sample_data/california_housing_train.csv")

print(dataset.columns)

X = dataset[['longitude', 'latitude', 'housing_median_age', 'total_rooms', 'total_bedrooms', 'population', 'households', 'median_income']]
y = dataset['median_house_value']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestClassifier(n_estimators=100, max_depth=5, min_samples_split=2)
# model = RandomForestClassifier({n_estimators:100,max_depth:5,min_samples_split:2})
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

accuracy = metrics.accuracy_score(y_test, y_pred)
precision = metrics.precision_score(y_test, y_pred, average='micro')
recall = metrics.recall_score(y_test, y_pred, average='micro')
f1_score = metrics.f1_score(y_test, y_pred, average='micro')
# accuracy = metrics.accuracy(y_test, y_pred)
# precision = precision(y_test, y_pred)
# recall = recall(y_test, y_pred)
# f1_score = f1_score(y_test, y_pred)

  # Save the model
joblib.dump(model, 'Example Model_model.pkl')

# Load the new data
new_data = pd.read_csv("/content/sample_data/california_housing_test.csv")

# Define the target variable column
target_variable = "median_income"

# Separate features and target variable
X_new = new_data[['longitude', 'latitude', 'housing_median_age', 'total_rooms', 'total_bedrooms', 'population', 'households', 'median_income']]
y_new = new_data['median_house_value']

# Train a new model
model = RandomForestClassifier()
model.fit(X_new, y_new)

# Make predictions using the new model
predictions = model.predict(X_new)

print(predictions)

print(accuracy, precision, recall, f1_score)

